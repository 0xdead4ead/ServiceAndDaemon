#include "stdafx.h"

int main(void) {

        /// Process ID and Session ID
        pid_t pid, sid;

        /// Forking the parent process
        /// fork return the process id of the child process
        pid = fork();
        if (pid < 0) {
                exit(EXIT_FAILURE);
        }

        /// If we have a PID
        if (pid > 0) {
                exit(EXIT_SUCCESS);
        }

        /// setting the umask to 0 in order to have full access to the files generated by the daemon
        umask(0);

        /// Creating a new SID for the child process
        /// The child process must get a unique SID from the kernel in order to operate
        sid = setsid();
        if (sid < 0) {
                exit(EXIT_FAILURE);
        }

        /// Changing the current working directory
        if ((chdir("/")) < 0) {
                exit(EXIT_FAILURE);
        }

        /// Closing out the standard file descriptors
        /// Since a daemon cannot use the terminal, these file descriptors are redundant and a potential security hazard.
        close(STDIN_FILENO);
        close(STDOUT_FILENO);
        close(STDERR_FILENO);

        FileWorker fWorker;
        fWorker.writeInit();
        while (true) {
           sleep(3);
           fWorker.writeContent();
        }
        fWorker.wirteEnd();

   exit(EXIT_SUCCESS);
}
