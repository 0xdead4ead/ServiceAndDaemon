#include "stdafx.h"
#include "LinuxDaemon.h"

#define DAEMON_NAME "LoggerLinuxDaemon"

void Process();

LinuxDaemon::LinuxDaemon()
{
}


LinuxDaemon::~LinuxDaemon()
{
}


int LinuxDaemon::DaemonEntry()
{
	#ifdef _linux__
	/// Process ID and Session ID
	pid_t pid, sid;

	/// Forking the parent process
	/// fork return the process id of the child process
	pid = fork();
	if (pid < 0) {
		exit(EXIT_FAILURE);
	}

	/// setting the umask to 0 in order to have full access to the files generated by the daemon
	umask(0);

	/// Creating a new SID for the child process
	/// The child process must get a unique SID from the kernel in order to operate
	sid = setsid();
	if (sid < 0) {
		exit(EXIT_FAILURE);
	}

	/// Changing the current working directory
	if ((chdir("/")) < 0) {
		exit(EXIT_FAILURE);
	}

	/// Closing out the standard file descriptors
	/// Since a daemon cannot use the terminal, these file descriptors are redundant and a potential security hazard.
	close(STDIN_FILENO);
	close(STDOUT_FILENO);
	close(STDERR_FILENO);

	// calling process function
	process();

	exit(EXIT_SUCCESS);
	return 0;
	#elif _WIN32
		return 0;
	#endif

}

void Process() {
	int i = 0;
	FileWorker fw;
	fw.writeInit();
	while (i < 10) {
		i++;
		fw.writeContent();
	}
	fw.writeEnd();
}
